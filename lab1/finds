{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "    Time Weather Temperature Company Humidity    Wind Goes\n",
      "0  Sunny    Warm      Normal  Strong     Warm    Same  Yes\n",
      "1  Sunny    Warm        High  Strong     Warm    Same  Yes\n",
      "2  Rainy    Cold        High  Strong     Warm  Change   No\n",
      "3  Sunny    Warm        High  Strong     Cool  Change  Yes \n",
      "\n",
      "\n",
      " The attributes are:  [['Sunny' 'Warm' 'Normal' 'Strong' 'Warm' 'Same']\n",
      " ['Sunny' 'Warm' 'High' 'Strong' 'Warm' 'Same']\n",
      " ['Rainy' 'Cold' 'High' 'Strong' 'Warm' 'Change']\n",
      " ['Sunny' 'Warm' 'High' 'Strong' 'Cool' 'Change']]\n",
      "\n",
      " The final hypothesis is: ['Sunny' 'Warm' '?' 'Strong' '?' '?']\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    " \n",
    "\n",
    "data = pd.read_csv(\"./data.csv\")\n",
    "print(data,\"\\n\")\n",
    " \n",
    "d = np.array(data)[:,:-1]\n",
    "print(\"\\n The attributes are: \",d)\n",
    " \n",
    "target = np.array(data)[:,-1]\n",
    "\n",
    "def findS(c,t):\n",
    "    for i, val in enumerate(t):\n",
    "        if val == \"Yes\":\n",
    "            specific_hypothesis = c[i].copy()\n",
    "            break\n",
    "             \n",
    "    for i, val in enumerate(c):\n",
    "        if t[i] == \"Yes\":\n",
    "            for x in range(len(specific_hypothesis)):\n",
    "                if val[x] != specific_hypothesis[x]:\n",
    "                    specific_hypothesis[x] = '?'\n",
    "                else:\n",
    "                    pass\n",
    "                 \n",
    "    return specific_hypothesis\n",
    " \n",
    "print(\"\\n The final hypothesis is:\",findS(d,target))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enter the number of attributes 6\n",
      "Enter the number of rows 4\n",
      "Enter the  6 ättributes\n",
      "Enter the name of  1  attribute \n",
      "Time\n",
      "Enter the name of  2  attribute \n",
      "Weather\n",
      "Enter the name of  3  attribute \n",
      "Temperature\n",
      "Enter the name of  4  attribute \n",
      "Company\n",
      "Enter the name of  5  attribute \n",
      "Humidity\n",
      "Enter the name of  6  attribute \n",
      "Wind\n",
      "Ënter the values of  1  row\n",
      "Enter the values of attributes\n",
      "Sunny\n",
      "Warm\n",
      "Normal\n",
      "Strong\n",
      "Warm\n",
      "Same\n",
      "Ënter the values of  2  row\n",
      "Enter the values of attributes\n",
      "Sunny\n",
      "Warm\n",
      "High\n",
      "Strong\n",
      "Warm\n",
      "Same\n",
      "Ënter the values of  3  row\n",
      "Enter the values of attributes\n",
      "Rainy\n",
      "Cold\n",
      "High\n",
      "Strong\n",
      "Warm\n",
      "Change\n",
      "Ënter the values of  4  row\n",
      "Enter the values of attributes\n",
      "Sunny\n",
      "Warm\n",
      "High\n",
      "Strong\n",
      "Cool\n",
      "Change\n",
      "Enter the target values\n",
      "Enter the value of  1  target\n",
      "Yes\n",
      "Enter the value of  2  target\n",
      "Yes\n",
      "Enter the value of  3  target\n",
      "No\n",
      "Enter the value of  4  target\n",
      "Yes\n",
      "\n",
      " The attributes are:  [['Sunny', 'Warm', 'Normal', 'Strong', 'Warm', 'Same'], ['Sunny', 'Warm', 'High', 'Strong', 'Warm', 'Same'], ['Rainy', 'Cold', 'High', 'Strong', 'Warm', 'Change'], ['Sunny', 'Warm', 'High', 'Strong', 'Cool', 'Change']]\n",
      "\n",
      " The target is:  ['Yes', 'Yes', 'No', 'Yes']\n",
      "\n",
      " The final hypothesis is: ['Sunny', 'Warm', '?', 'Strong', '?', '?']\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "\n",
    "n=int(input(\"Enter the number of attributes \"))\n",
    "l=int(input(\"Enter the number of rows \"))\n",
    "\n",
    "print(\"Enter the \",n,\"ättributes\")\n",
    "attributes=[]\n",
    "for i in range(1,n+1):\n",
    "  print(\"Enter the name of \",i,\" attribute \")\n",
    "  name=input()\n",
    "  \n",
    "for i in range(1,l+1):\n",
    "  print(\"Ënter the values of \",i,\" row\")\n",
    "  print(\"Enter the values of attributes\")\n",
    "  res=[]\n",
    "  for j in range(1,n+1):\n",
    "    res.append(input())\n",
    "  attributes.append(res)\n",
    "\n",
    "print(\"Enter the target values\")\n",
    "target=[]\n",
    "for i in range(1,l+1):\n",
    "  print(\"Enter the value of \",i,\" target\")\n",
    "  x=input()\n",
    "  target.append(x)\n",
    "  \n",
    "print(\"\\n The attributes are: \",attributes)\n",
    "print(\"\\n The target is: \",target)\n",
    "\n",
    "def findS(c,t):\n",
    "    for i, val in enumerate(t):\n",
    "        if val == \"Yes\":\n",
    "            specific_hypothesis = c[i].copy()\n",
    "            break\n",
    "             \n",
    "    for i, val in enumerate(c):\n",
    "        if t[i] == \"Yes\":\n",
    "            for x in range(len(specific_hypothesis)):\n",
    "                if val[x] != specific_hypothesis[x]:\n",
    "                    specific_hypothesis[x] = '?'\n",
    "                else:\n",
    "                    pass\n",
    "                 \n",
    "    return specific_hypothesis\n",
    "  \n",
    "print(\"\\n The final hypothesis is:\",findS(attributes,target))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
